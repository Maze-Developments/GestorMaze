/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package view;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileReader;
import java.io.FileWriter;
import java.io.IOException;
import java.io.PrintWriter;
import java.sql.Connection;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.SQLException;
import javax.swing.JOptionPane;

/**
 *
 * @author Klayton Massango
 */
public class ViewConexao extends javax.swing.JFrame {

    final private String driver = "com.mysql.jdbc.Driver";
    Connection CONEXAO;
    private boolean VERIFICACAO = false;

    /**
     * Creates new form ViewConexao
     */
    public ViewConexao() {

        initComponents();
        setLocationRelativeTo(null);
        if (VERIFICACAO == false) {
            LE_CONFIGURACAO_GRAVADA();
        }
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jTF_servidor = new javax.swing.JTextField();
        jTF_porta = new javax.swing.JTextField();
        jTF_usuario = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jTF_senha = new javax.swing.JPasswordField();
        jBtn_testar = new javax.swing.JButton();
        jBtn_iniciar = new javax.swing.JButton();
        jLabel6 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setMaximizedBounds(new java.awt.Rectangle(0, 0, 0, 0));
        setMaximumSize(new java.awt.Dimension(694, 251));
        setMinimumSize(new java.awt.Dimension(694, 251));
        setResizable(false);

        jPanel1.setBackground(new java.awt.Color(0, 0, 0));
        jPanel1.setMaximumSize(new java.awt.Dimension(694, 251));
        jPanel1.setMinimumSize(new java.awt.Dimension(694, 251));

        jLabel1.setFont(new java.awt.Font("Vodafone ExB", 0, 24)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(255, 255, 255));
        jLabel1.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel1.setText("CONFIGURAÇÕES DO BANCO DE DADOS");

        jTF_servidor.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N
        jTF_servidor.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTF_servidorActionPerformed(evt);
            }
        });

        jTF_porta.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N

        jTF_usuario.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N

        jLabel2.setFont(new java.awt.Font("Vodafone ExB", 0, 14)); // NOI18N
        jLabel2.setForeground(new java.awt.Color(255, 255, 255));
        jLabel2.setText("SERVIDOR");

        jLabel3.setFont(new java.awt.Font("Vodafone ExB", 0, 14)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(255, 255, 255));
        jLabel3.setText("PORTA");

        jLabel4.setFont(new java.awt.Font("Vodafone ExB", 0, 14)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(255, 255, 255));
        jLabel4.setText("USUARIO");

        jLabel5.setFont(new java.awt.Font("Vodafone ExB", 0, 14)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(255, 255, 255));
        jLabel5.setText("SENHA");

        jTF_senha.setFont(new java.awt.Font("Trebuchet MS", 1, 18)); // NOI18N

        jBtn_testar.setBackground(new java.awt.Color(0, 153, 204));
        jBtn_testar.setFont(new java.awt.Font("Vodafone ExB", 0, 14)); // NOI18N
        jBtn_testar.setForeground(new java.awt.Color(255, 255, 255));
        jBtn_testar.setText("TESTAR");
        jBtn_testar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_testarActionPerformed(evt);
            }
        });

        jBtn_iniciar.setBackground(new java.awt.Color(0, 204, 102));
        jBtn_iniciar.setFont(new java.awt.Font("Vodafone ExB", 0, 14)); // NOI18N
        jBtn_iniciar.setForeground(new java.awt.Color(255, 255, 255));
        jBtn_iniciar.setText("INICIAR");
        jBtn_iniciar.setEnabled(false);
        jBtn_iniciar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtn_iniciarActionPerformed(evt);
            }
        });

        jLabel6.setFont(new java.awt.Font("Vodafone ExB", 0, 10)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(255, 255, 255));
        jLabel6.setHorizontalAlignment(javax.swing.SwingConstants.CENTER);
        jLabel6.setText("Gestor de vendas");
        jLabel6.setHorizontalTextPosition(javax.swing.SwingConstants.CENTER);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(55, 55, 55)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jTF_servidor, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel2))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addComponent(jLabel6, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addComponent(jLabel1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addComponent(jBtn_testar, javax.swing.GroupLayout.PREFERRED_SIZE, 131, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jBtn_iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 129, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(199, 199, 199)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTF_porta, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel3))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jTF_usuario, javax.swing.GroupLayout.PREFERRED_SIZE, 174, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel4))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel5)
                            .addComponent(jTF_senha, javax.swing.GroupLayout.DEFAULT_SIZE, 147, Short.MAX_VALUE))))
                .addGap(68, 68, 68))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jLabel1)
                .addGap(41, 41, 41)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.CENTER)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addGap(6, 6, 6)
                        .addComponent(jTF_senha, javax.swing.GroupLayout.DEFAULT_SIZE, 32, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel4)
                        .addGap(6, 6, 6)
                        .addComponent(jTF_usuario))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel3)
                        .addGap(6, 6, 6)
                        .addComponent(jTF_porta))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(6, 6, 6)
                        .addComponent(jTF_servidor)))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBtn_testar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jBtn_iniciar, javax.swing.GroupLayout.PREFERRED_SIZE, 33, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(34, 34, 34)
                .addComponent(jLabel6, javax.swing.GroupLayout.PREFERRED_SIZE, 14, javax.swing.GroupLayout.PREFERRED_SIZE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jTF_servidorActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTF_servidorActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_jTF_servidorActionPerformed

    private void jBtn_testarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_testarActionPerformed
        // TODO add your handling code here:
        if (CONEXAO_SERVIDOR(jTF_servidor.getText(), jTF_porta.getText(), jTF_usuario.getText(), jTF_senha.getText())) {

            jBtn_iniciar.setEnabled(true);
        } else {
            JOptionPane.showMessageDialog(null, "Falha Na Conexão", "Falha", 0);
        }
    }//GEN-LAST:event_jBtn_testarActionPerformed

    private void jBtn_iniciarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtn_iniciarActionPerformed
        // TODO add your handling code here:
        if (CONEXAO_SERVIDOR(jTF_servidor.getText(), jTF_porta.getText(), jTF_usuario.getText(), jTF_senha.getText())) {
            if (GRAVA_CONFIGURACAO()) {//SE CONSEGUIR GRAVAR A CONFIGURAÇÃO PASSA PARA O PROXIMO PASSO
                if (LE_CONFIGURACAO_GRAVADA()) {//SE CONSEGUIR LER A GRAVAÇÃO REALIZADA PASSA PARA O PROXIMO PASSO
                    if (CRIA_DATA_BASE_COMPLETO()) { //SE NÃO OCORRER ERRO NO QUERES SQL  PASSA PARA O PROXIMO PASSO
                        FECHA_CONEXAO();//PASSOU TODOS OS PASSO AGORA IRÁ FECHAR A TELA E ABRIR OUTRA
                        new ViewLogin().setVisible(true); //CHAMO A TELA PRINCIPAL, OU SE QUIZER POSSO CHAMAR A TELA DE LOGIM. FICA A CRITERIO DO PROGRAMADOR
                        dispose();
//                        JOptionPane.showMessageDialog(null, "Teste Bem Sucedido");
                    } else {
                        jBtn_iniciar.setEnabled(false);
                    }
                } else {
                    jBtn_iniciar.setEnabled(false);
                }
            } else {
                jBtn_iniciar.setEnabled(false);
            }
        } else {
            jBtn_iniciar.setEnabled(false);
        }
    }//GEN-LAST:event_jBtn_iniciarActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ViewConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ViewConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ViewConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ViewConexao.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        ViewConexao ESTA_TELA = new ViewConexao();//INICIALIZO FAZENDO A PRIMEIRO A VERIFICAÇÃO ANTES DE ABRIR A TELA
        if (ESTA_TELA.LE_CONFIGURACAO_GRAVADA()) {//SE CONSEGUIR SE CONETAR PASSO PARA O PRÓXIMO PASSO.

//            if (ESTA_TELA.CRIA_DATA_BASE_COMPLETO()) { //SE NÃO OCORRER ERRO NO QUERES SQL  PASSA PARA O PROXIMO PASSO
            ESTA_TELA.VERIFICACAO = true;//AQUI JA ESTÁ TUDO OK    
            ESTA_TELA.FECHA_CONEXAO();//FECHARA A CONEXAO_SERVIDOR
            new ViewLogin().setVisible(true); //CHAMO A TELA PRINCIPAL, OU SE QUIZER POSSO CHAMAR A TELA DE LOGIM. FICA A CRITERIO DO PROGRAMADOR
//            }
        }
        if (ESTA_TELA.VERIFICACAO == false) {// SE NÃO OCORRER BEM AS VERIFICAÇÕES INICIALIZO O RUN PRA ABRIR A TELA DE CONFIGURAÇÃO

            /* Create and display the form */
            java.awt.EventQueue.invokeLater(new Runnable() {
                public void run() {
                    new ViewConexao().setVisible(true);
                }
            });
        }

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtn_iniciar;
    private javax.swing.JButton jBtn_testar;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JTextField jTF_porta;
    private javax.swing.JPasswordField jTF_senha;
    private javax.swing.JTextField jTF_servidor;
    private javax.swing.JTextField jTF_usuario;
    // End of variables declaration//GEN-END:variables

    private boolean LE_CONFIGURACAO_GRAVADA() {
        boolean leitura = false;
        try {
            String linha;
            String ArquivoConfiguracao = "database/ConexaoBanco/Configuracao/config.proprieties";
            int cont = 0;
            File arq = new File(ArquivoConfiguracao);
            if (arq.exists()) {

                FileReader reader = new FileReader(ArquivoConfiguracao);
                BufferedReader leitor = new BufferedReader(reader);
                while (true) {
                    linha = leitor.readLine();
                    if (cont == 0) {
                        jTF_servidor.setText(linha);
                    }
                    if (cont == 1) {
                        jTF_porta.setText(linha);
                    }
                    if (cont == 2) {
                        jTF_usuario.setText(linha);
                    }
                    if (cont >= 3) {
                        jTF_senha.setText(linha);
                        break;
                    }
//                    System.out.println(linha + "\n");
                    cont++;
                }
            }
            if (arq.exists()) {
                if (CONEXAO_SERVIDOR(jTF_servidor.getText(), jTF_porta.getText(), jTF_usuario.getText(), jTF_senha.getText())) {
                    leitura = true;
                }
            }

        } catch (Exception erro) {
        }

        return leitura;
    }

    private boolean GRAVA_CONFIGURACAO() {
        boolean grava = false;
        try {
            File diretorio = new File("database/ConexaoBanco/Configuracao");
            if (!diretorio.exists()) {
                diretorio.mkdirs();
            }
            FileWriter arq1 = new FileWriter("database/ConexaoBanco/Configuracao/config.proprieties");
            PrintWriter gravarArq = new PrintWriter(arq1);
            gravarArq.println(jTF_servidor.getText());
            gravarArq.println(jTF_porta.getText());
            gravarArq.println(jTF_usuario.getText());
            gravarArq.println(jTF_senha.getText());
            arq1.close();
            grava = true;
        } catch (IOException erro) {
            JOptionPane.showMessageDialog(null, "Você nao tem permição de adminstrador para configurar o"
                    + " Sistema.", "ERRO !", 0);
        }
        return grava;
    }

    private boolean CONEXAO_SERVIDOR(String Servidor, String Porta, String usuario, String Senha) {
        boolean com = false;
        String SERVIDOR = Servidor;
        String PORTA_CONEXAO = Porta;
        String USUARIO = usuario;
        String SENHA = Senha;
        try {
            Class.forName(driver);
            CONEXAO = DriverManager.getConnection("jdbc:mysql://" + SERVIDOR + ":" + PORTA_CONEXAO + "",
                    USUARIO, SENHA);
            com = true;
        } catch (ClassNotFoundException Fonte) {
        } catch (SQLException Fonte) {
        }
        return com;
    }

    private void FECHA_CONEXAO() {
        try {
            CONEXAO.close();
        } catch (SQLException fech) {
            JOptionPane.showMessageDialog(null, "Erro ao fechar conexao com o banco de dados" + fech);
        }
    }

    private boolean CRIA_DATA_BASE_COMPLETO() {
        boolean sucesso = true;
        if (CRIA_BANCO() == false) {
            sucesso = false;
        } else if (CRIA_TABELAS() == false) {
            sucesso = false;
        }

        return sucesso;
    }

    private boolean CRIA_BANCO() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE DATABASE IF NOT EXISTS gestordevendas";

        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
//        FECHA_CONEXAO();
        return sucesso;
    }

    private boolean CRIA_TABELAS() {
        boolean sucesso = true;

        CONEXAO_SERVIDOR(jTF_servidor.getText(), jTF_porta.getText(), jTF_usuario.getText(), jTF_senha.getText());

        if (CRIA_TABELA_FUNCIONARIOS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_PRODUTOS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_MESAS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_CATEGORIAS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_CONTAS() == false) {
            sucesso = false;
        } else if (CRIA_TABELA_VENDAS() == false) {
            sucesso = false;
        } else if (CRIA_VOID() == false) {
            sucesso = false;
        } else if (CRIA_ADMIN() == false) {
            sucesso = false;
        }
        FECHA_CONEXAO();
        return sucesso;
    }

    private boolean CRIA_TABELA_FUNCIONARIOS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS gestordevendas.funcionarios ( "
                + "id_funcionario INT NOT NULL AUTO_INCREMENT , "
                + "fun_nome VARCHAR(50) NOT NULL , "
                + "fun_bi VARCHAR(13) NULL , fun_telefone VARCHAR(13) NULL , "
                + "fun_usuario VARCHAR(10) , "
                + "fun_senha VARCHAR(20) , "
                + "nivel_acesso VARCHAR(20) NOT NULL , "
                + "hide TINYINT DEFAULT '0' , "
                + "PRIMARY KEY (id_funcionario))";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_TABELA_PRODUTOS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS gestordevendas.produtos ("
                + "id_produto INT NOT NULL AUTO_INCREMENT , "
                + "pro_nome VARCHAR(300) NOT NULL , "
                + "pro_categoria VARCHAR(50) NOT NULL , "
                + "pro_quantidade INT NOT NULL , "
                + "pro_preco DOUBLE NOT NULL , "
                + "PRIMARY KEY (id_produto))";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_TABELA_MESAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS gestordevendas.mesas ( "
                + "id_mesa INT NOT NULL AUTO_INCREMENT , "
                + "ms_nome VARCHAR(50) NOT NULL ,"
                + "hide TINYINT DEFAULT '0' ,"
                + "PRIMARY KEY (id_mesa))";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_TABELA_CATEGORIAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS gestordevendas.categorias ( "
                + "id INT NOT NULL AUTO_INCREMENT , "
                + "cat_nome VARCHAR(50) NOT NULL , "
                + "PRIMARY KEY (id))";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_TABELA_CONTAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS gestordevendas.contas ( "
                + "id_conta INT NOT NULL AUTO_INCREMENT , "
                + "fk_produto INT NOT NULL , "
                + "fk_mesa INT NOT NULL , "
                + "con_pro_qut INT NOT NULL , "
                + "con_pro_preco DOUBLE NOT NULL , "
                + "con_pro_sub DOUBLE NOT NULL , "
                + "con_pro_data DATE NOT NULL , "
                + "inativo TINYINT DEFAULT '0' , "
                + "PRIMARY KEY (id_conta), "
                + "FOREIGN KEY (fk_produto) REFERENCES produtos(id_produto) ON DELETE RESTRICT,"
                + "FOREIGN KEY (fk_mesa) REFERENCES mesas(id_mesa) ON DELETE RESTRICT)";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_TABELA_VENDAS() {
        boolean sucesso = false;
        PreparedStatement stm;
        String sql = "CREATE TABLE IF NOT EXISTS gestordevendas.vendas ( "
                + "id_venda INT NOT NULL AUTO_INCREMENT , "
                + "fk_conta INT NOT NULL , "
                + "vd_data DATE NOT NULL,"
                + "vd_total DOUBLE NOT NULL,"
                + "PRIMARY KEY (id_venda),"
                + "FOREIGN KEY (fk_conta) REFERENCES contas(id_conta) ON DELETE RESTRICT)";
        try {
            stm = CONEXAO.prepareStatement(sql);
            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_VOID() {
        boolean sucesso = false;
        PreparedStatement stm;
        String nome = "Mesa-101";
        int hide = 1;

        try {
            String sqlin = "insert into gestordevendas.mesas ("
                    + "ms_nome, "
                    + "hide)"
                    + "values(?,?)";
            // Preparar a string
            stm = CONEXAO.prepareStatement(sqlin);

            stm.setString(1, nome);
            stm.setInt(2, hide);

            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }

    private boolean CRIA_ADMIN() {
        boolean sucesso = false;
        PreparedStatement stm;
        String nome = "Maze Development";
        String bi = "000000000000M";
        String contacto = "+258872000726";
        String usuario = "mdev";
        String senha = "mazedev2*21";
        String nivel = "Administrador";
        int hide = 1;

        try {
            String sqlin = "insert into gestordevendas.funcionarios ("
                    + "fun_nome, "
                    + "fun_bi, fun_telefone, "
                    + "fun_usuario, "
                    + "fun_senha, "
                    + "nivel_acesso, hide)"
                    + "values(?,?,?,?,?,?,?)";
            // Preparar a string
            stm = CONEXAO.prepareStatement(sqlin);

            stm.setString(1, nome);
            stm.setString(2, bi);
            stm.setString(3, contacto);
            stm.setString(4, usuario);
            stm.setString(5, senha);
            stm.setString(6, nivel);
            stm.setInt(7, hide);

            stm.execute();
            sucesso = true;
        } catch (SQLException ex) {
            JOptionPane.showMessageDialog(null, ex.getMessage(), "Erro", 0);
        }
        return sucesso;
    }
}
